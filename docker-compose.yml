version: '3.3'

services:

  postgres:
    image: postgres:16.1-alpine
    env_file: .env/dev.env
    ports:
      - "15432:5432"
    volumes:
      - pokestation-postgres-data:/var/lib/postgresql/data
      - ./db/1-init.sql:/docker-entrypoint-initdb.d/1-init.sql
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready"]
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - pokestation-network
      
  pgadmin:
    image: dpage/pgadmin4:7.8
    env_file: .env/dev.env
    ports:
      - "16543:80"
    volumes:
      - ./conf/pgadmin/servers.json:/pgadmin4/servers.json
    restart: always
    networks:
      - pokestation-network
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    image: nginx:1.25.3
    env_file: .env/dev.env
    restart: always
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - pokestation-network
    depends_on:
      keycloak:
        condition: service_started
      backend:
        condition: service_started
      frontend:
        condition: service_started
      splunk:
        condition: service_healthy

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5
    env_file: .env/dev.env
    ports:
      - "9090:8080"
      - "9443:8443"
    entrypoint: '/opt/keycloak/bin/kc.sh start-dev --import-realm'
    volumes:
      - ./conf/keycloak/import/:/opt/keycloak/data/import:ro
    restart: always
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8080/health || echo 'Health check failed'"]
      interval: 30s
      timeout: 10s
      retries: 5
      #start_period: 120s
    networks:
      - pokestation-network
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    build: backend
    env_file: .env/dev.env
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - ./backend:/usr/src/app
      - pokestation-backend-logs:/usr/src/app/logs
    command: ["./mvnw", "spring-boot:run"]
    restart: always
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8080/backend/actuator/health || echo 'Health check failed'"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pokestation-network
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started

  frontend:
    build: frontend
    env_file: .env/dev.env
    ports:
      - "7070:80"
      - "7443:443"
    restart: always
    networks:
      - pokestation-network
    depends_on:
      keycloak:
        condition: service_started
      backend:
        condition: service_started

  splunk:
    image: splunk/splunk:latest
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_USER=splunk
      - SPLUNK_PASSWORD=splunk@123
      - SPLUNK_ENABLE_LISTEN=9997
    ports:
      - "8000:8000"
      - "8088:8088"
      - "8089:8089"
      - "9997:9997"
    volumes:
      - pokestation-splunk-data:/opt/splunk/var
      - pokestation-backend-logs:/opt/splunk/etc/apps/pokestation-backend/logs
      - ./conf/splunk/etc/system/local/:/opt/splunk/etc/system/local/:rw
    restart: always
    networks:
      - pokestation-network
    depends_on:
      backend:
        condition: service_started

  # metabase:
  #   image: metabase/metabase:v0.36.7
  #   env_file: .env/prod.env
  #   restart: always
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - inova-cnj-metabase-data:/metabase-data
  #   environment:
  #     JAVA_TIMEZONE: America/Recife
  #     JAVA_TOOL_OPTIONS: -Xmx1g -Duser.country=BR -Duser.language=pt
  #   restart: always
  #   networks:
  #     - pokestation-network
  #   depends_on:
  #     - postgres

volumes:
  pokestation-postgres-data:
    driver: local
  pokestation-splunk-data:
    driver: local
  pokestation-backend-logs:
    driver: local

networks: 
  pokestation-network:
    driver: bridge
    attachable: true